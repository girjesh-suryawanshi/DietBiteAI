import { WeeklyMealPlan, User } from "@shared/schema";
import { PDFDocument, rgb, StandardFonts } from "pdf-lib";
import * as fs from "fs";
import * as path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Helper function to sanitize text and remove unsupported characters  
function sanitizeText(text: string): string {
  // Remove emojis and other non-ASCII characters that aren't supported by standard fonts
  return text.replace(/[^\x00-\x7F]/g, '').trim();
}

interface Meal {
  type: string;
  name: string;
  time?: string;
  calories?: number;
  ingredients?: string[];
  instructions?: string[];
}

interface Day {
  day: string;
  meals: Meal[];
}


export async function generateMealPlanPDF(mealPlan: WeeklyMealPlan, userProfile?: User): Promise<string> {
  // Generate a filename with username if available
  const userName = userProfile?.name ? userProfile.name.replace(/[^a-zA-Z0-9]/g, '_') : 'user';
  const timestamp = Date.now();
  const filename = `${userName}_meal_plan_${timestamp}.pdf`;
  const tempDir = path.join(process.cwd(), "server", "temp");
  const filePath = path.join(tempDir, filename);
  
  // Ensure temp directory exists
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir, { recursive: true });
  }
  
  // Create a new PDF document
  const pdfDoc = await PDFDocument.create();
  const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);
  const helveticaBoldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
  const helveticaObliqueFont = await pdfDoc.embedFont(StandardFonts.HelveticaOblique);

  const pageSize = [612, 792]; // Standard US Letter size
  const margin = 40;
  const contentWidth = pageSize[0] - 2 * margin;

  // Colors
  const primaryColor = rgb(0.2, 0.7, 0.3); // Green
  const secondaryColor = rgb(0.15, 0.55, 0.75); // Blue
  const textColor = rgb(0.2, 0.2, 0.2);
  const lightGray = rgb(0.95, 0.95, 0.95);
  const mediumGray = rgb(0.6, 0.6, 0.6);

  // Helper function to calculate BMI
  function calculateBMI(weight: number, height: number): number {
    return weight / ((height / 100) ** 2);
  }

  // Helper function to get BMI category
  function getBMICategory(bmi: number): string {
    if (bmi < 18.5) return "Underweight";
    if (bmi < 25) return "Normal weight";
    if (bmi < 30) return "Overweight";
    return "Obese";
  }

  // Helper function to add new page
  function addNewPage() {
    const page = pdfDoc.addPage([pageSize[0], pageSize[1]]);
    // Add footer with more margin from bottom
    page.drawText('Generated by FitBite | www.fitbite.ai', {
      x: margin,
      y: 30, // Increased from 20 to 30 for better spacing
      size: 8,
      font: helveticaObliqueFont,
      color: mediumGray,
    });
    return page;
  }

  // Helper function to draw bordered box
  function drawBorderedBox(page: any, x: number, y: number, width: number, height: number, fillColor: any = null) {
    if (fillColor) {
      page.drawRectangle({
        x: x,
        y: y - height,
        width: width,
        height: height,
        color: fillColor,
      });
    }
    page.drawRectangle({
      x: x,
      y: y - height,
      width: width,
      height: height,
      borderColor: rgb(0.8, 0.8, 0.8),
      borderWidth: 1,
    });
  }

  // 1. COVER PAGE
  let page = addNewPage();
  let yPosition = pageSize[1] - 100;

  // Logo placeholder (circle)
  page.drawCircle({
    x: pageSize[0] / 2,
    y: yPosition,
    size: 30,
    color: primaryColor,
  });
  
  yPosition -= 80;

  // Title
  page.drawText('FitBite Personalized Meal Plan', {
    x: pageSize[0] / 2 - 160,
    y: yPosition,
    size: 24,
    font: helveticaBoldFont,
    color: primaryColor,
  });

  yPosition -= 60;

  // User info on cover
  if (userProfile?.name) {
    page.drawText(`Prepared for: ${sanitizeText(userProfile.name)}`, {
      x: pageSize[0] / 2 - 80,
      y: yPosition,
      size: 14,
      font: helveticaFont,
      color: textColor,
    });
    yPosition -= 25;
  }

  page.drawText(`Goal: ${mealPlan.goals?.fitness_goal?.replace('_', ' ') || 'Health & Wellness'}`, {
    x: pageSize[0] / 2 - 50,
    y: yPosition,
    size: 12,
    font: helveticaFont,
    color: textColor,
  });

  yPosition -= 20;

  // Week date range
  const currentDate = new Date();
  const weekStart = new Date(currentDate);
  weekStart.setDate(currentDate.getDate() - currentDate.getDay());
  const weekEnd = new Date(weekStart);
  weekEnd.setDate(weekStart.getDate() + 6);

  page.drawText(`Week: ${weekStart.toLocaleDateString()} - ${weekEnd.toLocaleDateString()}`, {
    x: pageSize[0] / 2 - 70,
    y: yPosition,
    size: 12,
    font: helveticaFont,
    color: textColor,
  });

  yPosition -= 60;

  // Tagline
  page.drawText('Smart AI Diet Plans. Culturally Relevant. Scientifically Balanced.', {
    x: pageSize[0] / 2 - 180,
    y: yPosition,
    size: 12,
    font: helveticaObliqueFont,
    color: secondaryColor,
  });

  // 2. PROFILE SECTION
  page = addNewPage();
  yPosition = pageSize[1] - 60;

  // Profile header
  page.drawText('Your Profile', {
    x: margin,
    y: yPosition,
    size: 20,
    font: helveticaBoldFont,
    color: primaryColor,
  });

  yPosition -= 40;

  if (userProfile) {
    const columnWidth = contentWidth / 2 - 10;
    
    // Left column
    let leftY = yPosition;
    page.drawText('Personal Information', {
      x: margin,
      y: leftY,
      size: 14,
      font: helveticaBoldFont,
      color: textColor,
    });
    leftY -= 25;

    if (userProfile.name) {
      page.drawText(`Name: ${sanitizeText(userProfile.name)}`, {
        x: margin,
        y: leftY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      leftY -= 18;
    }

    if (userProfile.age) {
      page.drawText(`Age: ${userProfile.age} years`, {
        x: margin,
        y: leftY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      leftY -= 18;
    }

    if (userProfile.gender) {
      page.drawText(`Gender: ${userProfile.gender}`, {
        x: margin,
        y: leftY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      leftY -= 18;
    }

    if (userProfile.height_cm) {
      page.drawText(`Height: ${userProfile.height_cm} cm`, {
        x: margin,
        y: leftY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      leftY -= 18;
    }

    if (userProfile.weight_kg) {
      page.drawText(`Weight: ${userProfile.weight_kg} kg`, {
        x: margin,
        y: leftY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      leftY -= 18;
    }

    // BMI calculation
    if (userProfile.weight_kg && userProfile.height_cm) {
      const bmi = calculateBMI(userProfile.weight_kg, userProfile.height_cm);
      const bmiCategory = getBMICategory(bmi);
      page.drawText(`BMI: ${bmi.toFixed(1)} (${bmiCategory})`, {
        x: margin,
        y: leftY,
        size: 11,
        font: helveticaBoldFont,
        color: bmi < 18.5 || bmi >= 25 ? rgb(0.8, 0.4, 0.2) : primaryColor,
      });
      leftY -= 18;
    }

    // Right column
    let rightY = yPosition;
    page.drawText('Preferences & Goals', {
      x: margin + columnWidth + 20,
      y: rightY,
      size: 14,
      font: helveticaBoldFont,
      color: textColor,
    });
    rightY -= 25;

    if (userProfile.activity_level) {
      page.drawText(`Activity Level: ${userProfile.activity_level.replace('_', ' ')}`, {
        x: margin + columnWidth + 20,
        y: rightY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      rightY -= 18;
    }

    if (userProfile.country_region) {
      page.drawText(`Region: ${sanitizeText(userProfile.country_region)}`, {
        x: margin + columnWidth + 20,
        y: rightY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      rightY -= 18;
    }

    if (userProfile.foods_to_include && userProfile.foods_to_include.length > 0) {
      page.drawText(`Preferred Foods: ${userProfile.foods_to_include.slice(0, 3).join(', ')}`, {
        x: margin + columnWidth + 20,
        y: rightY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      rightY -= 18;
    }

    if (userProfile.health_conditions && userProfile.health_conditions.length > 0) {
      page.drawText(`Health Conditions: ${userProfile.health_conditions.join(', ')}`, {
        x: margin + columnWidth + 20,
        y: rightY,
        size: 11,
        font: helveticaFont,
        color: textColor,
      });
      rightY -= 18;
    }

    yPosition = Math.min(leftY, rightY) - 40;
  }
  
  // 3. WEEKLY MEAL PLAN LAYOUT
  let totalCalories = 0;
  const dailyCalories: { [key: string]: number } = {};

  for (const day of mealPlan.days) {
    // Check if we need a new page - ensure enough space for day header + at least one meal
    if (yPosition < 250) {
      page = addNewPage();
      yPosition = pageSize[1] - 60;
    }

    // Day header with background
    drawBorderedBox(page, margin, yPosition, contentWidth, 35, lightGray);
    
    page.drawText(`${day.day.toUpperCase()}`, {
      x: margin + 10,
      y: yPosition - 25,
      size: 18,
      font: helveticaBoldFont,
      color: textColor,
    });

    yPosition -= 50;

    let dayCalories = 0;
    
    for (const meal of day.meals) {
      // Calculate meal box height first
      const mealBoxHeight = 120 + (meal.ingredients?.length || 0) * 12 + (meal.instructions?.length || 0) * 12;
      
      // Check if we need a new page for meal - ensure the entire meal fits with footer space
      if (yPosition < mealBoxHeight + 80) { // 80px buffer for footer and spacing
        page = addNewPage();
        yPosition = pageSize[1] - 60;
      }
      
      // Draw meal box
      drawBorderedBox(page, margin, yPosition, contentWidth, mealBoxHeight);

      // Meal header row
      const mealTime = meal.time || getMealTime(meal.type);
      const mealCalories = meal.calories || 0;
      dayCalories += mealCalories;

      page.drawText(`${sanitizeText(meal.name || meal.type)}`, {
        x: margin + 10,
        y: yPosition - 20,
        size: 16,
        font: helveticaBoldFont,
        color: textColor,
      });

      page.drawText(`Time: ${mealTime}`, {
        x: margin + contentWidth - 180,
        y: yPosition - 20,
        size: 12,
        font: helveticaObliqueFont,
        color: mediumGray,
      });

      page.drawText(`${mealCalories} cal`, {
        x: margin + contentWidth - 80,
        y: yPosition - 20,
        size: 12,
        font: helveticaBoldFont,
        color: primaryColor,
      });

      let mealY = yPosition - 50;

      // Ingredients section
      if (meal.ingredients && meal.ingredients.length > 0) {
        page.drawText('Ingredients:', {
          x: margin + 10,
          y: mealY,
          size: 12,
          font: helveticaBoldFont,
          color: textColor,
        });
        mealY -= 20;

        for (const ingredient of meal.ingredients.slice(0, 6)) {
          page.drawText(`• ${sanitizeText(ingredient)}`, {
            x: margin + 20,
            y: mealY,
            size: 10,
            font: helveticaFont,
            color: textColor,
          });
          mealY -= 12;
        }
        mealY -= 10;
      }

      // Instructions section
      if (meal.instructions && meal.instructions.length > 0) {
        page.drawText('Instructions:', {
          x: margin + 10,
          y: mealY,
          size: 12,
          font: helveticaBoldFont,
          color: textColor,
        });
        mealY -= 20;

        for (let i = 0; i < meal.instructions.slice(0, 4).length; i++) {
          page.drawText(`${i + 1}. ${sanitizeText(meal.instructions[i])}`, {
            x: margin + 20,
            y: mealY,
            size: 10,
            font: helveticaFont,
            color: textColor,
          });
          mealY -= 12;
        }
      }

      yPosition -= (mealBoxHeight + 20);
    }
    
    dailyCalories[day.day] = dayCalories;
    totalCalories += dayCalories;
    yPosition -= 30; // Space between days
  }

  // 4. WEEKLY NUTRITION SUMMARY
  page = addNewPage();
  yPosition = pageSize[1] - 60;

  page.drawText('Weekly Nutrition Summary', {
    x: margin,
    y: yPosition,
    size: 20,
    font: helveticaBoldFont,
    color: primaryColor,
  });

  yPosition -= 40;

  // Table header
  drawBorderedBox(page, margin, yPosition, contentWidth, 30, lightGray);
  page.drawText('Day', {
    x: margin + 10,
    y: yPosition - 20,
    size: 12,
    font: helveticaBoldFont,
    color: textColor,
  });
  page.drawText('Calories', {
    x: margin + contentWidth - 80,
    y: yPosition - 20,
    size: 12,
    font: helveticaBoldFont,
    color: textColor,
  });

  yPosition -= 30;

  // Table rows
  for (const [day, calories] of Object.entries(dailyCalories)) {
    drawBorderedBox(page, margin, yPosition, contentWidth, 25);
    page.drawText(day, {
      x: margin + 10,
      y: yPosition - 18,
      size: 11,
      font: helveticaFont,
      color: textColor,
    });
    page.drawText(`${calories}`, {
      x: margin + contentWidth - 60,
      y: yPosition - 18,
      size: 11,
      font: helveticaFont,
      color: textColor,
    });
    yPosition -= 25;
  }

  // Total row
  drawBorderedBox(page, margin, yPosition, contentWidth, 30, lightGray);
  page.drawText('TOTAL', {
    x: margin + 10,
    y: yPosition - 20,
    size: 12,
    font: helveticaBoldFont,
    color: textColor,
  });
  page.drawText(`${totalCalories}`, {
    x: margin + contentWidth - 60,
    y: yPosition - 20,
    size: 12,
    font: helveticaBoldFont,
    color: primaryColor,
  });

  yPosition -= 50;

  // 5. GROCERY LIST
  const groceryList = generateGroceryList(mealPlan.days);
  
  page.drawText('Weekly Grocery List', {
    x: margin,
    y: yPosition,
    size: 18,
    font: helveticaBoldFont,
    color: primaryColor,
  });

  yPosition -= 30;

  const categories = ['Vegetables', 'Grains & Pulses', 'Dairy', 'Spices'];
  for (const category of categories) {
    if (groceryList[category] && groceryList[category].length > 0) {
      // Calculate space needed for this category (header + items)
      const itemsToShow = Math.min(groceryList[category].length, 8);
      const spaceNeeded = 20 + (itemsToShow * 14) + 10; // header + items + spacing
      
      if (yPosition < spaceNeeded + 60) { // 60px buffer for footer
        page = addNewPage();
        yPosition = pageSize[1] - 60;
      }

      page.drawText(category, {
        x: margin,
        y: yPosition,
        size: 14,
        font: helveticaBoldFont,
        color: secondaryColor,
      });
      yPosition -= 20;

      for (const item of groceryList[category].slice(0, 8)) {
        page.drawText(`• ${sanitizeText(item)}`, {
          x: margin + 10,
          y: yPosition,
          size: 10,
          font: helveticaFont,
          color: textColor,
        });
        yPosition -= 14;
      }
      yPosition -= 10;
    }
  }
  
  // Save the PDF to file
  const pdfBytes = await pdfDoc.save();
  fs.writeFileSync(filePath, pdfBytes);
  
  // Return the URL path for serving the PDF
  return `/temp/${filename}`;
}

// Helper function to get meal time
function getMealTime(mealType: string): string {
  switch (mealType.toLowerCase()) {
    case 'breakfast': return '8:00 AM';
    case 'lunch': return '1:00 PM';
    case 'dinner': return '7:00 PM';
    case 'snack': return '4:00 PM';
    default: return '12:00 PM';
  }
}

// Helper function to generate grocery list
function generateGroceryList(days: Day[]): { [category: string]: string[] } {
  const groceryList: { [category: string]: Set<string> } = {
    'Vegetables': new Set(),
    'Grains & Pulses': new Set(),
    'Dairy': new Set(),
    'Spices': new Set()
  };

  const categoryKeywords = {
    'Vegetables': ['tomato', 'onion', 'carrot', 'spinach', 'potato', 'bell pepper', 'cucumber', 'lettuce', 'broccoli', 'cauliflower'],
    'Grains & Pulses': ['rice', 'wheat', 'lentil', 'chickpea', 'bean', 'quinoa', 'oats', 'barley', 'dal'],
    'Dairy': ['milk', 'yogurt', 'cheese', 'butter', 'paneer', 'cream'],
    'Spices': ['salt', 'pepper', 'turmeric', 'cumin', 'coriander', 'garam masala', 'chili', 'garlic', 'ginger']
  };

  days.forEach(day => {
    day.meals.forEach(meal => {
      if (meal.ingredients) {
        meal.ingredients.forEach(ingredient => {
          const lowerIngredient = ingredient.toLowerCase();
          
          Object.entries(categoryKeywords).forEach(([category, keywords]) => {
            if (keywords.some(keyword => lowerIngredient.includes(keyword))) {
              groceryList[category].add(ingredient);
            }
          });
        });
      }
    });
  });

  // Convert Sets to Arrays
  const result: { [category: string]: string[] } = {};
  Object.entries(groceryList).forEach(([category, items]) => {
    result[category] = Array.from(items);
  });

  return result;
}


